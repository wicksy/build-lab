#!/bin/sh
#
# Stage 2 bootstrap for pfSense
#
# Does the following:
#
# 1. Sources in a customisation variables script created by Stage 1 bootstrap
# 2. Creates an expect(1) script to set the IP address of the management NIC [both supplied as variables in 1)]
# 3. Executes the expect(1) script
# 4. Installs git [making the assumption we now have outside world access courtesy of 2) and 3)]
# 5. Installs curl so that a key/value pair indicating provisioning completed can be sent back to the keystore
# 6. Creates an ssh private key file using another variable sourced in 1)
# 7. Pulls out the git repository server from another variable sourced in 1)
# 8. Creates an .ssh/config entry for 6) to turn off strict host key checking
# 9. Clones a (Saltstack) repository from a remote [set in a variable sourced in 1)]
# 10. Creates links to pillar and states under salt:// (/usr/local/etc/salt/) to enable 10)
# 11. Run a local (Saltstack) highstate
# 12. Remove the stage 1 bootstrap from the boot process
# 13. Send a key/value pair back to the keystore indicating provisioning is complete
#

# Function to write out expect to set interface IP (for management NIC)
#
Make_Expect() {

TMPFILE="/tmp/tmp.$$"
TMPDIR="/tmp/salt"

/bin/rm -f "${TMPFILE}"
/bin/rm -rf "${TMPDIR}"
/bin/mkdir -p "${TMPDIR}"

cat > "${TMPFILE}" <<EOF
#!/usr/local/bin/expect

set mgmt_nic \$env(MGMT_NIC)
set mgmt_ip \$env(MGMT_IP)
set menu_option {([1-9])\ \-}

spawn /etc/rc.initial.setlanip
expect {
  -re "(\[1-9]\ ).*\\\\(\$mgmt_nic" {
      set match \$expect_out(buffer)
      set matchTuples [regexp -all -inline \$menu_option \$match]
      foreach {number} \$matchTuples {
        set option_choose \$number
      }
  }
}
send "\$number\r"
expect ">"
send "\$mgmt_ip\r"
expect ">"
send "24\r"
expect ">"
send "\r"
expect ">"
send "\r"
expect "Do you want to enable the DHCP server on LAN? (y/n)"
send "n\r"
expect "Do you want to revert to HTTP as the webConfigurator protocol? (y/n)"
send "n\r"
expect "Press <ENTER> to continue"
send "\r"
expect eof
exit
EOF

/bin/chmod 0700 "${TMPFILE}"
/usr/sbin/chown root:wheel "${TMPFILE}"

}

# Source customisation variables setup by Stage 1 bootstrap
#
. /usr/local/bin/customisation_vars.sh

# Build the expect script and execute it
#
Make_Expect
"${TMPFILE}"

# Set hostname
#
/bin/hostname "${HOSTNAME}"

# Install git and curl
#
echo "y" | /usr/sbin/pkg install -f git
echo "y" | /usr/sbin/pkg install -f curl

# Get MAC address for management NIC used in KV pair later
#
MAC=$(/sbin/ifconfig "${MGMT_NIC}" | awk '/^[ \t]*ether / {print $2}')

# SSH defs
#
KEYFILE="${HOME}/.ssh/id_rsa"
SSHDIR=$(/usr/bin/dirname "${KEYFILE}")
SSHCONFIG="${SSHDIR}/config"

# Make .ssh
#
/bin/mkdir -p "${SSHDIR}"
/bin/chmod 0700 "${SSHDIR}"
/usr/sbin/chown root:wheel "${SSHDIR}"

# Create deploy key
#
echo "${SSH_DEPLOY_KEY}" > "${KEYFILE}"
/bin/chmod 0600 "${KEYFILE}"
/usr/sbin/chown root:wheel "${KEYFILE}"

# Extract git remote host
#
GITHOST=$(echo "${GITURL}" \
	 | /usr/bin/awk -F'@' '{print $2}' \
	 | /usr/bin/awk -F':' '{print $1}' \
	 | /usr/bin/tr -d ' ')

# Turn off strict host key checking for git host
#
echo -e "Host ${GITHOST}\n\tStrictHostKeyChecking no\n" > "${SSHCONFIG}"

# Clone repo
#
cd "${TMPDIR}"
/usr/local/bin/git clone "${GITURL}" .

# Create salt:// entities
#
/bin/ln -sf "${TMPDIR}/pillar/" /usr/local/etc/salt/pillar
/bin/ln -sf "${TMPDIR}/states/" /usr/local/etc/salt/states

# Run a highstate
#
salt-call -l debug state.highstate --local

# Disable stage 1 bootstrap
#
/bin/rm -f /usr/local/etc/rc.d/bootstrap.sh

# Send completed kv pair back to keystore
#
KEYSTORE="keystore:8500"
/usr/local/bin/curl -X PUT "http://${KEYSTORE}/v1/kv/${MAC}/customisation" -d "complete"

# Tidy up and exit
#
/bin/rm -f "${TMPFILE}"
exit 0
